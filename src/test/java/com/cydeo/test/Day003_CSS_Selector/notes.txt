09/22/2022

Today's schedule:
    #1- Review
    #2- Task1
    #3- Create utility class
    #4- Task2
    #5- cssSelector
    #6- xpath
    #7- .isDisplayed()


------------------------------------------------------------


REVIEW:

- .findElement(By.locator("STRING"))
  - What does it do?
   - Finds and returns a single web element

  - What does it accept as argument?
   - It accepts locator parameter as String

  - What is the return type?
   - Return type is WebElement

  - What kind of exception does it throw?
   - It will throw NoSuchElementException if it can not find given web element

  - What happens when exception is thrown in Selenium code execution? Is it going to execute the rest of the lines?
    - Once it throws the exception, the rest of the code will not executed UNLESS we handle it.

  - When do we have NoSuchElementException?
    - Wrong locator provided
    - Syncronization: when  driver and browser are not on same page, driver will try to find a web element that is not loaded yet. If this happens, it will throw NoSuchElementException.


- .click();
  - What does it do?
    - It click to given web element

  - Does it accept argument?
    - No.

  - Does it work just by itself --> XXXdriver.click();XXX
    - driver.findElement(BY.locator("")).click()

*** Difference between click and submit method?
  -  click() - Perform only click operation as like mouse click
  -  submit() - perform Enter operation as like keyboard Enter event


- .sendKeys("Some Text");
  - What does it do?
   - It will pass the provided string into given element

  - Does it accept argument?
   - Yes, it accepts String arg.
   - We can pass Keys commands into sendKeys method as well

  - Keys.ENTER:
   - This piece of code will imitate user pressing ENTER from keyboard


- .getText();
  - What does it do?
   - It will get the content from in between opening and closing tag

  - What is the return type?
   - String

  - Does it accept any argument?
   - No.

   syntax: We can not say driver.getText()

           driver.findElement(BY.locator("")).getText()

 Ex:
 <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

 driver.findElement(By.id("sjdg65")).getText() --> TESLA CYBERTRUCK


- .getAttribute("Attribute name");
  - What does it do?
   - find the matching attribute and returns its value

  - What is the return type?
   - String

  - Does it accept any argument?
   - It accepts String arg

Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

- driver.findElement(By.id("sjdg65")).getAttribute("href") --> https://tesla.com
- driver.findElement(By.id("sjdg65")).getAttribute("name") --> uhs67
- driver.findElement(By.id("sjdg65")).getAttribute("class") --> hsjd98
- driver.findElement(By.id("sjdg65")).getAttribute("id") --> sjdg65


LOCATORS:

- How many total locators we have?
 - 8 locators:
   - id
   - name
   - className
   - linkText
   - partialLinkText
   - tagName
   - cssSelector
   - xpath

1- id:
  - It will find and return web element that has matching "id" attribute value
  - "id" is always unique

Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

    driver.findElement(By.id("sjdg65"))

2- name:
  - It will find and return web element that has first matching "name" attribute value
  - "name" is NOT always unique

Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

    driver.findElement(By.name("uhs67"));

3- className:
  - It will find and return web element that has first matching "className" attribute value
  - "className" is NOT always unique

 Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

    driver.findElement(By.className("hsjd98"));

4- linkText:
  - It will look through of the LINKS in the HTML page and return first matching result
  - It ONLY ONLY ONLY works with links (<a> tag)
  - it works similar to .equals() methos in java
  - It is looking for EXACT String match

Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

    driver.findElement(By.linkText("TESLA CYBERTRUCK"));

5- partialLinktext:
  - It will look through of the LINKS in the HTML page and return first matching result
  - It ONLY ONLY ONLY works with links (<a> tag)
  - it works similar to .contains() method in java
  - It is looking for PARTIAL String match

Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

  - driver.findElement(By.partialLinkText("TESLA CYBERTRUCK"));
  - driver.findElement(By.partialLinkText("TESLA"))
  - driver.findElement(By.partialLinkText("CYBERTRUCK"))
  - driver.findElement(By.partialLinkText("ESLA"))

- tagName:
  - This locator locates using given TAG NAME
  - We pass the Tag name as String parameter
  - It will find and return first matching result

  Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

    driver.findElement(By.tagname("a"))

------------------------------------------------------

- cssSelector:
 - it is one of 8 locators coming from Selenium library
 - it allows us to create custom locators
 - we are able to locate web elements with any attribute value
 - we are not just limited to name, id, className attributes value
 - We can use any custom attribute we see on web page

 Syntax #1: tagname[attribute='value']
            tagname[attribute="value"]

 Ex: <a href="https://tesla.com" name="uhs67" class="hsjd98" id="sjdg65"> TESLA CYBERTRUCK </a>

    a[href='https://tesla.com']
    a[name='uhs67']
    a[class='hsjd98']
    a[id='sjdg65']


Syntax #2: it is limited to use only id or class attribute value
          "." --> stands for class attribute
          "#" --> stands for id attribute

          tagName.classValue
          tagname#idValue
